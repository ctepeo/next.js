name: Deploy to Cloudflare Worker
on:
  push:
    branches:
      #    - nest-js
      - main
  pull_request:
    branches:
      - dev
    types: [closed]
jobs:
  build:
    #if: github.event.pull_request.merged == true
    name: Install dependencies
    strategy:
      matrix:
        node-version: [22.x]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Get current date
        id: date
        run: |
          echo "{date}={$(date +'%Y-%m-%d')}" >> $GITHUB_ENV
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Fetch cache
        if: steps.npm-deps-cached.outputs.cache-hit != 'true'
        id: npm-prod-deps-cached
        uses: actions/cache/restore@v4
        env:
          cache-name: node_modules-prod-cache
        with:
          path: ./node_modules
          key: ${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install only production dependencies
        if: steps.npm-prod-deps-cached.outputs.cache-hit != 'true'
        run: npm ci
      - name: Save production cache
        if: steps.npm-prod-deps-cached.outputs.cache-hit != 'true'
        id: cache-npm-prod-dep
        uses: actions/cache/save@v4
        env:
          cache-name: node_modules-prod-cache
        with:
          path: ./node_modules
          key: ${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release_${{ env.date }}_${{ github.sha }}
          path: ./
          retention-days: 1
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    needs: build
    steps:
      - name: Download release
        uses: actions/download-artifact@v4
        with:
          name: release_${{ env.date }}_${{ github.sha }}
      - name: Deploy to cloudflare
        run: npm run deploy
  notify:
    name: Notify
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    needs: deploy
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_USERNAME: 'Deployer'
          SLACK_COLOR: ${{ job.status }}
          SLACK_FOOTER: 'Frontend deployed :rocket:'
